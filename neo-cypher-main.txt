LOAD CSV WITH HEADERS 
FROM 'file:///main1.csv' AS line
WITH DISTINCT line
MERGE (category:Category{name: line.`Category`})
CREATE (P:Product {name: line.`Product name`})


LOAD CSV WITH HEADERS 
FROM 'file:///main1.csv' AS line
match (c:Category{name: line.`Category`})
MERGE (p:Product{name:line.`Product name `})
with c,p
MERGE (p)-[:Product_of]->(c)
return p,c


LOAD CSV WITH HEADERS 
FROM 'file:///main1.csv' AS line
match (p:Product{name: line.`Product name `})
MERGE (pc:Product_component{name:line.`Component `})
with p,pc
MERGE (pc)-[:component_of]->(p)
return p,pc

LOAD CSV WITH HEADERS 
FROM 'file:///main1.csv' AS line with line 
match (p:Product{name: line.`Product name `})
match (pc:Product_component{name:line.`Component `,Al_content:line.`Aluminium `,Cu_content:line.`Copper `,Steel_content:line.`Steel `,Plastic_content:line.`Plastic `,Li_ion_Battery_Content:line.`Li_ion battery`,PCB_content:line.`PCB `,Flat_Panel_glass:line.`Flat panel glass`,CRT_glass:line.`CRT glass `,other_glass:line.`Other glass`,other_metal_content:line.`Other metals`,other_contents:line.`Others`,total_mass:line.`Total mass (g)`})
with p,pc
MERGE (pc)-[:component_of]->(p)
return p,pc


==============================================================================


LOAD CSV WITH HEADERS 
FROM 'file:///main1.csv' AS line
WITH DISTINCT line
MERGE (category:Category{name: line.`Category`})
CREATE (P:Product {name: line.`Product name`})


LOAD CSV WITH HEADERS 
FROM 'file:///main1.csv' AS line
match (c:Category{name: line.`Category`})
MERGE (p:Product{name:line.`Product name `})
with c,p
MERGE (p)-[:Product_of]->(c)
return p,c


LOAD CSV WITH HEADERS 
FROM 'file:///main1.csv' AS line
match (p:Product{name: line.`Product name `})
CREATE (pc:Product_component{name:line.`Component `,Al_content:line.`Aluminium `,Cu_content:line.`Copper `,Steel_content:line.`Steel `,Plastic_content:line.`Plastic `,Li_ion_Battery_Content:line.`Li_ion battery`,PCB_content:line.`PCB `,Flat_Panel_glass:line.`Flat panel glass`,CRT_glass:line.`CRT glass `,other_glass:line.`Other glass`,other_metal_content:line.`Other metals`,other_contents:line.`Others`,total_mass:line.`Total mass (g)`})
with p,pc
MERGE (pc)-[:component_of]->(p)
return p,pc

==========================================================================================



LOAD CSV WITH HEADERS 
FROM 'file:///main1.csv' AS line
WITH DISTINCT line
MERGE (c:Category{name: line.`Category`})
MERGE (p:Product{name:line.`Product name `})
MERGE (p)-[:Product_of]->(c)
CREATE (pc:Product_component{name:line.`Component `,Al_content:line.`Aluminium `,Cu_content:line.`Copper `,Steel_content:line.`Steel `,Plastic_content:line.`Plastic `,Li_ion_Battery_Content:line.`Li_ion battery`,PCB_content:line.`PCB `,Flat_Panel_glass:line.`Flat panel glass`,CRT_glass:line.`CRT glass `,other_glass:line.`Other glass`,other_metal_content:line.`Other metals`,other_contents:line.`Others`,total_mass:line.`Total mass (g)`})
MERGE (pc)-[:component_of]->(p)
return p,pc,c


GRANT ROLE admin TO jake1



LOAD CSV WITH HEADERS 
FROM 'file:///main1.csv' AS line
WITH DISTINCT line
MERGE (c:Category{name: line.`Category`})
MERGE (p:Products{name:line.`Product name `})
MERGE (p)-[:Product_of]->(c)
CREATE (pc:ProductComponents{name:line.`Component `,Al_content:line.`Aluminium `,Cu_content:line.`Copper `,Steel_content:line.`Steel `,Plastic_content:line.`Plastic `,Li_ion_Battery_Content:line.`Li_ion battery`,PCB_content:line.`PCB `,Flat_Panel_glass:line.`Flat panel glass`,CRT_glass:line.`CRT glass `,other_glass:line.`Other glass`,other_metal_content:line.`Other metals`,other_contents:line.`Others`,total_mass:line.`Total mass (g)`})
MERGE (pc)-[:component_of]->(p)
return p,pc,c


SHOW CONSTRAINT
CREATE CONSTRAINT ON (c:Category) ASSERT c.name IS UNIQUE;
CREATE CONSTRAINT ON (p:Product) ASSERT p.name IS UNIQUE;


http://localhost:7474/db/neo4j/tx
{
  "statements": [
    {
      "statement": "match (n:Category) RETURN n"
    }
  ]
}



match (n:Category) match (p:Products) MERGE (p)-[x:Product_of]->(c) RETURN n,p,x

MATCH (pc:ProductComponents)
match (p:Products)
RETURN sum(toInteger(pc.Cu_content))



MATCH c = (Category)
match p = (Products)
match pc=(ProductComponents)  
FOREACH (n IN nodes(c)
| match  (Category {name:n.name})<--(Products)<--(ProductComponents) 
SET n.cu =sum(toInteger(ProductComponents.Cu_content) ))/////////////////////wrong


match (Category {name:'LAPTOP'})<--(Products)<--(ProductComponents)
with ProductComponents,Category,sum(toInteger(ProductComponents.Cu_content)) as s
set Category.cu=s

match (Category {name:'LAPTOP'})<--(Products)<--(ProductComponents) return sum(toInteger(ProductComponents.Cu_content)) as sum
match (Products {name:'Dell Latitude 14.1" C600 (2001)'})<--(ProductComponents) return sum(toInteger(ProductComponents.Cu_content))
match (Products {name:'Dell Latitude 14.1" C600 (2001)'})-->(ProductComponents) return ProductComponents.Cu_content 




****************Final(Aggregation Query at Category Level)**************************
match (Category {name:'LAPTOP'})<--(Products)<--(ProductComponents)
call{
match (Category {name:'LAPTOP'})<--(Products)<--(ProductComponents)
with ProductComponents,Category,sum((toInteger(ProductComponents.Cu_content))) as s
return sum(s) as t 
} 
set Category.cu=t
************************or********************
match (Category {name:'DRONE'})<--(Products)<--(ProductComponents)
unwind toInteger(ProductComponents.Cu_content) as u
with sum(u) as t,Category
SET Category.cu=t
return Category

match (Category {name:'DRONE'})<--(Products {name:'Promark P70-VR quadcopter (2016)'})<--(ProductComponents)
unwind toInteger(ProductComponents.Cu_content) as u
with sum(u) as t,Category,Products
SET Products.cu=t
return Category




match (Category {name:'LAPTOP'})<--(Products)<--(ProductComponents)
unwind toInteger(ProductComponents.Cu_content) as u
return sum(u)


************************Aggregation at Category Level*****************
match (c:Category)
UNWIND  c AS n
unwind keys(n) as k
with n,k
match (Category {name:n.name})<--(Products)<--(ProductComponents)
unwind toInteger(ProductComponents.Cu_content) as u
with sum(u) as t,Category
SET Category.cu=t
return Category

*******************Aggregation at Product Level*************************
match (c:Products)
UNWIND  c AS n
with n
match (Category)<--(Products {name:n.name})<--(ProductComponents)
unwind toInteger(ProductComponents.Cu_content) as u
with sum(u) as t,Products
SET Products.cu=t
return Products


match (c:Products)
UNWIND  c AS n
with n
match (Category)<--(Products {name:n.name})<--(ProductComponents)
unwind toInteger(ProductComponents.PCB_content    	) as pc
unwind toInteger(ProductComponents.Steel_content	) as st
with sum(pc) as pcb_,sum(st) as s,Products
SET Products.pcb=pcb_
SET Products.steel=s
return Products


match (c:Category)
UNWIND  c AS n
with n
match (Category{name:n.name})<--(Products )<--(ProductComponents)
unwind toInteger(ProductComponents.PCB_content    	) as pc
unwind toInteger(ProductComponents.Steel_content	) as st
with sum(pc) as pcb_,sum(st) as s,Products,Category
SET Category.pcb=pcb_
SET Category.steel=s
return Category


match (pc:ProductComponents) 
with  keys(pc)  as lpc limit 1
match (c:Category)
unwind lpc as kpc
UNWIND  c AS n
with n,kpc
match (Category{name:n.name})<--(Products )<--(ProductComponents)
unwind toInteger(ProductComponents[kpc]) as pc
with sum(pc) as pcb_,Products,Category,kpc
SET Category.kpc=pcb_
return Category

match (pc:ProductComponents) return keys(pc)/////for returning properties of a node


match (pc:ProductComponents) 
unwind keys(pc) as unpc
with unpc
match (c:Category)
UNWIND  c AS n
with n,unpc
match (Category{name:n.name})<--(Products )<--(ProductComponents)
unwind toInteger(ProductComponents.unpc) as pc
with sum(pc) as pcb_,Products,Category,unpc
SET Category.unpc=pcb_
return Category/////////////////failed




match (pc:ProductComponents) 
with  keys(pc)  as lpc limit 1
match (c:Category)
unwind lpc as kpc
UNWIND  c AS n
with n,kpc

match (Category{name:n.name})<--(Products )<--(ProductComponents)
unwind toInteger(ProductComponents.kpc) as pc
with sum(pc) as pcb_,Products,Category,kpc
SET Category.kpc=pcb_
return Category/////////////////////failed



match (pc:ProductComponents) 
with  keys(pc)  as lpc limit 1
unwind lpc as kpc
return kpc



match (c:Category)
unwind c as k
unwind keys(k) as l
return  c.name, l,  k[l]


********************Dashboard scripts**************
MATCH (p:Category) 
RETURN p.name as Category_name,
       p.cu as cu_content

MATCH (c:Products)
RETURN c.name as name,
       c.cu as cu ,c.pcb as pcb,c.plastic as plastic,c.steel as steel 
      
MATCH (n:Category)
RETURN n.name as name, 
       n.cu as cu,
       n.pcb as pcb

MATCH (c:Category) 
RETURN c.name as Category_name,
       c.cu as cu 
MATCH (c:Products)
RETURN c.name as name,
       c.cu as cu ,c.pcb as pcb,c.plastic as plastic,c.steel as steel  
/////////////////////
match (Category {name:'DRONE'})<--(Products)<--(ProductComponents)
unwind toInteger(ProductComponents.Cu_content) as u
with sum(u) as t,Category
SET Category.cu=t
return Category

match (Category {name:'DRONE'})<--(Products {name:'Promark P70-VR quadcopter (2016)'})<--(ProductComponents)
unwind toInteger(ProductComponents.Cu_content) as u
with sum(u) as t,Category,Products
SET Products.cu=t
return Category
//////////////////////////////

grapxiv
USername:w....
Pass>>d..

neo4j 
user:jake1..
pas>>ke1..


MATCH (Category{name:'DVD PLAYER'})
SET Category.image1='https://pngimg.com/uploads/cd_dvd/cd_dvd_PNG102322.png'


mvn org.apache.maven.plugins:maven-install-plugin:2.3.1:install-file "-Dfile=lib/org.RDKitDoc.jar" "-DgroupId=org.rdkit" "-DartifactId=rdkit-doc" "-Dversion=1.0.0" "-Dpackaging=jar"

for restoring backuped database 
First we have to stop the database
D:\Software\relate-data\dbmss\dbms-5ee43576-9146-4e30-bb47-b20a073093f9\bin>neo4j-ad
min restore --from=C:\Users\navee\Downloads\**** --database=**** --force  

http://www.cheminfo.org/Chemistry/Cheminformatics/FormatConverter/index.html

LOAD CSV WITH HEADERS 
FROM 'file:///****.csv' AS line
WITH DISTINCT line
create (Chemical1:Structure1 {Chemical1:line.`Level 3`, sdf1: line.`File name (sdf)`})