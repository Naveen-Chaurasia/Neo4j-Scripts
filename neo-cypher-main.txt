LOAD CSV WITH HEADERS 
FROM 'file:///main1.csv' AS line
WITH DISTINCT line
MERGE (category:Category{name: line.`Category`})
CREATE (P:Product {name: line.`Product name`})


LOAD CSV WITH HEADERS 
FROM 'file:///main1.csv' AS line
match (c:Category{name: line.`Category`})
MERGE (p:Product{name:line.`Product name `})
with c,p
MERGE (p)-[:Product_of]->(c)
return p,c


LOAD CSV WITH HEADERS 
FROM 'file:///main1.csv' AS line
match (p:Product{name: line.`Product name `})
MERGE (pc:Product_component{name:line.`Component `})
with p,pc
MERGE (pc)-[:component_of]->(p)
return p,pc

LOAD CSV WITH HEADERS 
FROM 'file:///main1.csv' AS line with line 
match (p:Product{name: line.`Product name `})
match (pc:Product_component{name:line.`Component `,Al_content:line.`Aluminium `,Cu_content:line.`Copper `,Steel_content:line.`Steel `,Plastic_content:line.`Plastic `,Li_ion_Battery_Content:line.`Li_ion battery`,PCB_content:line.`PCB `,Flat_Panel_glass:line.`Flat panel glass`,CRT_glass:line.`CRT glass `,other_glass:line.`Other glass`,other_metal_content:line.`Other metals`,other_contents:line.`Others`,total_mass:line.`Total mass (g)`})
with p,pc
MERGE (pc)-[:component_of]->(p)
return p,pc


==============================================================================


LOAD CSV WITH HEADERS 
FROM 'file:///main1.csv' AS line
WITH DISTINCT line
MERGE (category:Category{name: line.`Category`})
CREATE (P:Product {name: line.`Product name`})


LOAD CSV WITH HEADERS 
FROM 'file:///main1.csv' AS line
match (c:Category{name: line.`Category`})
MERGE (p:Product{name:line.`Product name `})
with c,p
MERGE (p)-[:Product_of]->(c)
return p,c


LOAD CSV WITH HEADERS 
FROM 'file:///main1.csv' AS line
match (p:Product{name: line.`Product name `})
CREATE (pc:Product_component{name:line.`Component `,Al_content:line.`Aluminium `,Cu_content:line.`Copper `,Steel_content:line.`Steel `,Plastic_content:line.`Plastic `,Li_ion_Battery_Content:line.`Li_ion battery`,PCB_content:line.`PCB `,Flat_Panel_glass:line.`Flat panel glass`,CRT_glass:line.`CRT glass `,other_glass:line.`Other glass`,other_metal_content:line.`Other metals`,other_contents:line.`Others`,total_mass:line.`Total mass (g)`})
with p,pc
MERGE (pc)-[:component_of]->(p)
return p,pc

==========================================================================================



LOAD CSV WITH HEADERS 
FROM 'file:///main1.csv' AS line
WITH DISTINCT line
MERGE (c:Category{name: line.`Category`})
MERGE (p:Product{name:line.`Product name `})
MERGE (p)-[:Product_of]->(c)
CREATE (pc:Product_component{name:line.`Component `,Al_content:line.`Aluminium `,Cu_content:line.`Copper `,Steel_content:line.`Steel `,Plastic_content:line.`Plastic `,Li_ion_Battery_Content:line.`Li_ion battery`,PCB_content:line.`PCB `,Flat_Panel_glass:line.`Flat panel glass`,CRT_glass:line.`CRT glass `,other_glass:line.`Other glass`,other_metal_content:line.`Other metals`,other_contents:line.`Others`,total_mass:line.`Total mass (g)`})
MERGE (pc)-[:component_of]->(p)
return p,pc,c






LOAD CSV WITH HEADERS 
FROM 'file:///main1.csv' AS line
WITH DISTINCT line
MERGE (c:Category{name: line.`Category`})
MERGE (p:Products{name:line.`Product name `})
MERGE (p)-[:Product_of]->(c)
CREATE (pc:ProductComponents{name:line.`Component `,Al_content:line.`Aluminium `,Cu_content:line.`Copper `,Steel_content:line.`Steel `,Plastic_content:line.`Plastic `,Li_ion_Battery_Content:line.`Li_ion battery`,PCB_content:line.`PCB `,Flat_Panel_glass:line.`Flat panel glass`,CRT_glass:line.`CRT glass `,other_glass:line.`Other glass`,other_metal_content:line.`Other metals`,other_contents:line.`Others`,total_mass:line.`Total mass (g)`})
MERGE (pc)-[:component_of]->(p)
return p,pc,c


SHOW CONSTRAINT
CREATE CONSTRAINT ON (c:Category) ASSERT c.name IS UNIQUE;
CREATE CONSTRAINT ON (p:Product) ASSERT p.name IS UNIQUE;


http://localhost:7474/db/neo4j/tx
{
  "statements": [
    {
      "statement": "match (n:Category) RETURN n"
    }
  ]
}



match (n:Category) match (p:Products) MERGE (p)-[x:Product_of]->(c) RETURN n,p,x

MATCH (pc:ProductComponents)
match (p:Products)
RETURN sum(toInteger(pc.Cu_content))



MATCH c = (Category)
match p = (Products)
match pc=(ProductComponents)  
FOREACH (n IN nodes(c)
| match  (Category {name:n.name})<--(Products)<--(ProductComponents) 
SET n.cu =sum(toInteger(ProductComponents.Cu_content) ))/////////////////////wrong


match (Category {name:'LAPTOP'})<--(Products)<--(ProductComponents)
with ProductComponents,Category,sum(toInteger(ProductComponents.Cu_content)) as s
set Category.cu=s

match (Category {name:'LAPTOP'})<--(Products)<--(ProductComponents) return sum(toInteger(ProductComponents.Cu_content)) as sum
match (Products {name:'Dell Latitude 14.1" C600 (2001)'})<--(ProductComponents) return sum(toInteger(ProductComponents.Cu_content))
match (Products {name:'Dell Latitude 14.1" C600 (2001)'})-->(ProductComponents) return ProductComponents.Cu_content 




****************Final(Aggregation Query at Category Level)**************************
match (Category {name:'LAPTOP'})<--(Products)<--(ProductComponents)
call{
match (Category {name:'LAPTOP'})<--(Products)<--(ProductComponents)
with ProductComponents,Category,sum((toInteger(ProductComponents.Cu_content))) as s
return sum(s) as t 
} 
set Category.cu=t
************************or********************
match (Category {name:'DRONE'})<--(Products)<--(ProductComponents)
unwind toInteger(ProductComponents.Cu_content) as u
with sum(u) as t,Category
SET Category.cu=t
return Category

match (Category {name:'DRONE'})<--(Products {name:'Promark P70-VR quadcopter (2016)'})<--(ProductComponents)
unwind toInteger(ProductComponents.Cu_content) as u
with sum(u) as t,Category,Products
SET Products.cu=t
return Category




match (Category {name:'LAPTOP'})<--(Products)<--(ProductComponents)
unwind toInteger(ProductComponents.Cu_content) as u
return sum(u)


************************Aggregation at Category Level*****************
match (c:Category)
UNWIND  c AS n
unwind keys(n) as k
with n,k
match (Category {name:n.name})<--(Products)<--(ProductComponents)
unwind toInteger(ProductComponents.Cu_content) as u
with sum(u) as t,Category
SET Category.cu=t
return Category

*******************Aggregation at Product Level*************************
match (c:Products)
UNWIND  c AS n
with n
match (Category)<--(Products {name:n.name})<--(ProductComponents)
unwind toInteger(ProductComponents.Cu_content) as u
with sum(u) as t,Products
SET Products.cu=t
return Products


match (c:Products)
UNWIND  c AS n
with n
match (Category)<--(Products {name:n.name})<--(ProductComponents)
unwind toInteger(ProductComponents.PCB_content    	) as pc
unwind toInteger(ProductComponents.Steel_content	) as st
with sum(pc) as pcb_,sum(st) as s,Products
SET Products.pcb=pcb_
SET Products.steel=s
return Products


match (c:Category)
UNWIND  c AS n
with n
match (Category{name:n.name})<--(Products )<--(ProductComponents)
unwind toInteger(ProductComponents.PCB_content    	) as pc
unwind toInteger(ProductComponents.Steel_content	) as st
with sum(pc) as pcb_,sum(st) as s,Products,Category
SET Category.pcb=pcb_
SET Category.steel=s
return Category


match (pc:ProductComponents) 
with  keys(pc)  as lpc limit 1
match (c:Category)
unwind lpc as kpc
UNWIND  c AS n
with n,kpc
match (Category{name:n.name})<--(Products )<--(ProductComponents)
unwind toInteger(ProductComponents[kpc]) as pc
with sum(pc) as pcb_,Products,Category,kpc
SET Category.kpc=pcb_
return Category

match (pc:ProductComponents) return keys(pc)/////for returning properties of a node


match (pc:ProductComponents) 
unwind keys(pc) as unpc
with unpc
match (c:Category)
UNWIND  c AS n
with n,unpc
match (Category{name:n.name})<--(Products )<--(ProductComponents)
unwind toInteger(ProductComponents.unpc) as pc
with sum(pc) as pcb_,Products,Category,unpc
SET Category.unpc=pcb_
return Category/////////////////failed




match (pc:ProductComponents) 
with  keys(pc)  as lpc limit 1
match (c:Category)
unwind lpc as kpc
UNWIND  c AS n
with n,kpc

match (Category{name:n.name})<--(Products )<--(ProductComponents)
unwind toInteger(ProductComponents.kpc) as pc
with sum(pc) as pcb_,Products,Category,kpc
SET Category.kpc=pcb_
return Category/////////////////////failed



match (pc:ProductComponents) 
with  keys(pc)  as lpc limit 1
unwind lpc as kpc
return kpc



match (c:Category)
unwind c as k
unwind keys(k) as l
return  c.name, l,  k[l]


********************Dashboard scripts**************
MATCH (p:Category) 
RETURN p.name as Category_name,
       p.cu as cu_content

MATCH (c:Products)
RETURN c.name as name,
       c.cu as cu ,c.pcb as pcb,c.plastic as plastic,c.steel as steel 
      
MATCH (n:Category)
RETURN n.name as name, 
       n.cu as cu,
       n.pcb as pcb

MATCH (c:Category) 
RETURN c.name as Category_name,
       c.cu as cu 
MATCH (c:Products)
RETURN c.name as name,
       c.cu as cu ,c.pcb as pcb,c.plastic as plastic,c.steel as steel  
/////////////////////
match (Category {name:'DRONE'})<--(Products)<--(ProductComponents)
unwind toInteger(ProductComponents.Cu_content) as u
with sum(u) as t,Category
SET Category.cu=t
return Category

match (Category {name:'DRONE'})<--(Products {name:'Promark P70-VR quadcopter (2016)'})<--(ProductComponents)
unwind toInteger(ProductComponents.Cu_content) as u
with sum(u) as t,Category,Products
SET Products.cu=t
return Category
//////////////////////////////

grapxiv
USername:w....
Pass>>d..

neo4j 
user:jake1..
pas>>ke1..


MATCH (Category{name:'DVD PLAYER'})
SET Category.image1='https://pngimg.com/uploads/cd_dvd/cd_dvd_PNG102322.png'


mvn org.apache.maven.plugins:maven-install-plugin:2.3.1:install-file "-Dfile=lib/org.RDKitDoc.jar" "-DgroupId=org.rdkit" "-DartifactId=rdkit-doc" "-Dversion=1.0.0" "-Dpackaging=jar"

for restoring backuped database -after stopping database
First we have to stop the database
D:\Software\relate-data\dbmss\dbms-5ee43576-9146-4e30-bb47-b20a073093f9\bin>neo4j-admin restore --from=C:\Users\navee\Downloads\**** --database=**** --force  

restoring from a dump- after stopping database
D:\Software\relate-data\dbmss\dbms-5ee43576-9146-4e30-bb47-b20a073093f9\bin>neo4j-admin load --from=D:\Ardhi\****.dump  --database=**** --force


CREATE USER jake1
SET PASSWORD 'jake1' CHANGE not REQUIRED
SET STATUS active
SET HOME DATABASE ardhi44
GRANT ROLE admin TO jake1



http://www.cheminfo.org/Chemistry/Cheminformatics/FormatConverter/index.html


CALL org.rdkit.search.exact.smiles(['Chemical', 'Structure'], '***' 
YIELD canonical_smiles 
RETURN org.rdkit.utils.svg(canonical_smiles) as svg
Scalable Vector Graphics is an XML-based vector image format for two-dimensional graphics with support for interactivity and animation. The SVG specification is an open standard developed by the World Wide Web Consortium since 1999. SVG images are defined in a vector graphics format and stored in XML text files. 

for map visualisation in neodash
WITH
  point({latitude:toFloat('13.43'), longitude:toFloat('56.21')}) AS p1,
  point({latitude:toFloat('13.10'), longitude:toFloat('56.41')}) AS p2
  
RETURN {id:"a", label: "Person", point: p1},
       {id: "b", label: "Person", point: p2},
       {start: "a", end: "b",  id: 1}


////////////////////////////

match (loc:Location)<-[:SHIPPED_FROM]-(sub_material:Level2)
with point({latitude:toFloat(loc.Latitude), longitude:toFloat(loc.Longitude)}) AS p1,
 

WITH
  point({latitude:toFloat('13.43'), longitude:toFloat('56.21')}) AS p1,
  point({latitude:toFloat('13.10'), longitude:toFloat('56.41')}) AS p2
  
RETURN {id:"a", label: "Person", point: p1},
       {id: "b", label: "Person", point: p2},
       {start: "a", end: "b",type: "KNOWS",  id: 1}




match (loc:Location)<-[:_FROM]-(****:*****)
//with point({latitude:toFloat(loc.Latitude), longitude:toFloat(loc.Longitude)}) AS p1
return toFloat(left(loc.Latitude,7)),toFloat(left(loc.Longitude,7))


match (loc:Location)<-[:SHIPPED_FROM]-(sub_material:Level2)
WITH point({latitude:toFloat(left(loc.Latitude,7)), longitude:toFloat(left(loc.Longitude,7))}) AS p1
RETURN  {id:"a", label: "Person", point: p1};

call db.schema.visualization()


//For Location in neodash app
match (loc1:Location)<-[sf:SHIPPED_FROM]-(material:Level1)-[st:SHIPPED_TO]->(loc2:Location)
WITH point({latitude:toFloat(left(loc2.Latitude,7)), longitude:toFloat(left(loc2.Longitude,7))}) AS p1, point({latitude:toFloat(left(loc1.Latitude,7)), longitude:toFloat(left(loc1.Longitude,7))}) AS p2,loc2,loc1,sf,st
RETURN [{id:"a", material:"****", point: p1,Location:"Shipped_To "+loc2.Location,label:loc2.Location},{id:"b", material:"*****", Location:"Shipped_From "+loc1.Location,label: loc1.Location, point: p2},{start: "a", end: "b",type:"SHIPPED_TO" , id: 1,Material:"*****"}]

neo4j
oZo2kkYb7QZoA8I_giMN6Wn8b16ACUrDdN1R2h-ofyg
https://browser.neo4j.io/?connectURL=neo4j%2Bs%3A%2F%2Fneo4j%406799f560.databases.neo4j.io%2F&cmd=guide&arg=movies&_ga=2.71877840.230755171.1655092750-1401971628.1655092750
https://browser.neo4j.io/?connectURL=neo4j%2Bs%3A%2F%2Fneo4j%406799f560.databases.neo4j.io%2F&_ga=2.105062592.230755171.1655092750-1401971628.1655092750
https://bloom.neo4j.io/index.html?connectURL=neo4j%2Bs%3A%2F%2F6799f560.databases.neo4j.io&_ga=2.105062592.230755171.1655092750-1401971628.1655092750

for sdf files

for exluding null values with merge command give WHERE IS NOT NULL

https://cambridge-intelligence.com/first-impressions-of-keylines/


URL: naveen.cloud.joget.com
Username: admin
Password: admin

https://naveen.budibase.app/builder/app/app_dev_naveen_77d34a3d02ab4aa2889411486d714cee/design/screen/screen_6af65d933606485dadab6766fbc64779/cda4250bd4b4d4f51ba1a408076406abc


https://www.oracle.com/a/ocom/docs/graph-database-use-cases-ebook.pdf
https://www.nature.com/articles/s41598-019-45349-y
https://towardsdatascience.com/an-introduction-to-graph-neural-network-gnn-for-analysing-structured-data-afce79f4cfdc



for refactoring values

match(c:company)
call apoc.refractornormalise as boolen(comp,'ownership(property)',['Private',1]['State Run',0])
return comp

for changing property name
call apoc.periodic.iterate(
'match (c:comp) return comp','set comp.isprivate=comp.ownership remove comp.ownership',
{batchSize:10,parallel:true}

apoc.load.json(url)

)

//for loading json values directly in neo4j from url
WITH 'https://raw.githubusercontent.com/neo4j-contrib/neo4j-apoc-procedures/4.4/core/src/test/resources/person.json' AS url
CALL apoc.load.json(url) YIELD value as person
MERGE (p:Person {name:person.name})
   ON CREATE SET p.age = person.age, p.children = size(person.children)

//for handling null values from csv while creating merge statement 

LOAD CSV WITH HEADERS FROM 'file:///C:/Users/Zona5/Documents/Neo4j/checkIntel/import/personaldata.csv' AS line1
WITH line1
WHERE NOT line1.address1 IS NULL
MERGE (a:Address1 {address_name1:line1.address1})
           or
///for putting default values instead of "unknown"
LOAD CSV WITH HEADERS FROM 'file:///C:/Users/Zona5/Documents/Neo4j/checkIntel/import/personaldata.csv' AS line1
MERGE (a:Address1 {address_name1: coalesce(line1.address1, "Unknown")})


//graphileon tutorial
https://www.youtube.com/watch?v=fOOptzvhtS4

//for Styling
https://docs.graphileon.com/graphileon/For_Dashboard_Users/Styling.html

//Node style sample
{
	"display": "circle",                              // circle|square|rectangle|triangle
	"width": 80,                                      // in pixels
	"height": 80,                                     // in pixels
	"fillColor": "white",                             // html colour
	"opacity": "1",                                   // 0 - 1
	"lineColor": "black",                             // html colour
	"lineWidth": "2px",
	"lineOpacity": "1",                               // 0 - 1
	"label": "(%).properties.name",                   // caption, e.g. (%).id or (%).properties.name
	"labelPosition": "center",                        // top|left|bottom|right|center
	"iconColor": "black",                             // html colour
	"iconClass": "fa fa-female"                       // font awesome class, e.g. fa fa-female, see https://fontawesome.com/icons for reference
   	"image": "(%).properties.image",                  // image as node background
	"labelStyle": {                                   // caption styling
		"font": "25px Open Sans Condensed, sans-serif",
		"fontWeight": "5",
		"color": "black",
		"stroke": "none",
		"strokeWidth": "1"
	}
}


//Relations style sample
{
	"fillColor": "#999",                              // html colour
	"width": 4,                                       // width in pixels
	"label": "(%).type",                              // caption, e.g. (%).type or  (%).properties.weight
	"toDecoration": "none",                           // end decoration
	"marker": {                                       // marker styling
		"display": "arrow",
		"width": 10,
		"lineWidth": 1,
		"color": "grey",
		"fillColor": "grey"
	},
	"labelStyle": {                                   // caption styling
		"font": "15px Verdana",
		"fontWeight": "0.1px",
		"color": "black"
	}
}
//for icon styling

{
    "type": "tooltip",
    "data":"naveen",
	"lineColor": "blue",
	"lineWidth": "14px"
}
{
	"fillColor": "#ff0",
	"iconOpacity": 0.1,
	"iconColor": "#000",
	"iconClass": "fa fa-users"
},
for ia_function
{
	"fillColor": "#51A3A3",
	"lineColor": "#51A3A3",
	"label": "evaluate((%).properties.name||(%).properties.type)",
	"labelStyle": {
		"fontWeight": "900",
		"color": "white"
	},
	"lineWidth": "10px",
	"lineStyle": "dash"
}



node:	applies to any node
node:MyLabel	applies to any node with a :MyLabel label
node[myParam]	applies to any node with a .myParam property
node[myParam=abc]	applies to any node with the .myParam property having the specific value 'abc', or
node[myParam=Abc Def]	applies to any node with the .myParam property having the specific value 'Abc Def' (case-sensitive)
node:MyLabel[myParam>5]	applies to any node with a :MyLabel label and for which the .myParam property value is greater than 5.
node:MyLabel[prop1>5][prop2=10]	applies to any node with a :MyLabel label and for which the value of property .prop is greater than 5 and value of .prop2 is 10.
rel:	applies to any relation
rel:MYRELTYPE	applies to any relation of type :MYRELTYPE
SELECT DISTINCT (VERTEX(?s) as ?n)
WHERE {	
  ?s ?r ?m . 
  ?m a ?type . 
}
LIMIT 10


{
"display": "rectangle",
	"fillColor": "#51A3v3",
	"lineColor": "#51A3A3",
	"label": "evaluate((%).properties.ChemicalName||(%).properties.type)",
	"labelStyle": {
		"fontWeight": "900",
		"color": "white"
	},
	"lineWidth": "0px",
	"lineStyle": "dash"
}


///Query for executing trigger
CREATE (_179631:IA_Function:IA_Neo4jQuery:Example_1 {`$cypher`:'match (n) RETURN labels(n),COUNT(n) AS cnt     ORDER BY cnt desc', `name`:'LabelsAndCounts'}) 
CREATE (_179632:IA_Function:IA_TableView:Example_1 {`name`:'LabelsAndCounts'})  
CREATE (_179631)-[_546660:TRIGGER {`type`:'success', `#data`:'(%).data'}]->(_179632) 
WITH COUNT(*) AS foo
MATCH (n:Example_1) RETURN n


//for inserting background image of a node in graphileon
"image": "(%).properties.file",   

//Logo Panel conf
$template <a href="http://www.graphileon.com" target="_blank"><img src="images/graphileonlogo.png"  width="100%"/></a>
<div class="version-label"> Version</div>
<div class="version-value">{{version}}</div>
<div class="cf"></div>

////*********Graphilytic***************////////////
for grphilytic installation
https://graphlytic.biz/blog/how-to-install-graphlytic-in-neo4j-desktop



//for graphilytic
for (let i = 0; i < node.data._dbLabels.length; i++){
	let label = node.data._dbLabels[i];
	switch (label){
	case "AlternativeLevel2":
		return "Title_for_label_AlternativeLevel2";
		break;
	case "AlternativeProcess":
		return "Title_for_label_AlternativeProcess";
		break;
	case "Chemical":
		return node.data.Chemical;
		break;
	case "Energy":
		return node.data.Energy;
		break;
	case "Level0":
		return node.data.Item;
		break;
	case "Level1":
		return node.data.Material;
		break;
	case "Level2":
		return node.data.SubMaterial;
		break;
	case "Level3":
		return node.data.ChemicalName;
		break;
	case "Location":
		return node.data.Location;
		break;
	case "Process":
		return node.data.ProcessName;
		break;
	case "Structure":
		return node.data.Structure;
		break;
	}
}
//for installing grphilytics in neo4j
https://npm.graphlytic.biz/graphlytic-desktop

/for buddibase
https://naveen.budibase.app/app/
username:ns***
pass:d***


///grphylitic username and pass

Username	a**********
Email	a*****@a*****.com


for (let i = 0; i < node.data._dbLabels.length; i++){
	let label = node.data._dbLabels[i];
	switch (label){
	case "AlternativeLevel2":
		return "Title_for_label_AlternativeLevel2";
		break;
	case "AlternativeProcess":
		return "Title_for_label_AlternativeProcess";
		break;
	case "Chemical":
		return node.data;
		break;
	case "Energy":
		return node.data;
		break;
	case "Level0":
		return node.data;
		break;
	case "Level1":
		return node.data;
		break;
	case "Level2":
		return node.data;
		break;
	case "Level3":
		return node.data;
		break;
	case "Location":
		return node.data;
		break;
	case "Process":
		return node.data;
		break;
	case "Structure":
		return node.data;
		break;
	}
}

https://www.geeksforgeeks.org/graph-representations-using-set-hash/
Prototype app
D:\Reacte\loginpage\src\logo.svg


/////////////////for building executables jar for a spring project////////////////
Step 3: Now run the mvn clean package command. If you are using STS/Eclipse IDE, then Right Click on your project » Run As » Maven build… » Goals: clean package » Run.

Step 4: Step 3 will create an executable JAR file of your Spring Boot application and put it within the target folder.

Step 5: Run the executable JAR, using the following Java command.

java -jar .jar

///////////////

prAlternative.Water = coalesce('','')

//To rename property
match (t:Level1{Material:'CFRP'}) 
SET t.Water = t.WaterConsumption
REMOVE t.WaterConsumption
return t



for applying dijkastras algorithm
CREATE (a:Location {name: 'A'}),
       (b:Location {name: 'B'}),
       (c:Location {name: 'C'}),
       (d:Location {name: 'D'}),
       (e:Location {name: 'E'}),
       (f:Location {name: 'F'}),
       (a)-[:ROAD {cost: 50}]->(b),
       (a)-[:ROAD {cost: 50}]->(c),
       (a)-[:ROAD {cost: 100}]->(d),
       (b)-[:ROAD {cost: 40}]->(d),
       (c)-[:ROAD {cost: 40}]->(d),
       (c)-[:ROAD {cost: 80}]->(e),
       (d)-[:ROAD {cost: 30}]->(e),
       (d)-[:ROAD {cost: 80}]->(f),
       (e)-[:ROAD {cost: 40}]->(f);



CALL gds.graph.project(
    'myGraph',
    'Location',
    'ROAD',
    {
        relationshipProperties: 'cost'
    }
)

MATCH (source:Location {name: 'A'}), (target:Location {name: 'F'})
CALL gds.shortestPath.dijkstra.stream('myGraph', {
    sourceNode: source,
    targetNode: target,
    relationshipWeightProperty: 'cost'
})
YIELD index, sourceNode, targetNode, totalCost, nodeIds, costs, path
RETURN
    index,
    gds.util.asNode(sourceNode).name AS sourceNodeName,
    gds.util.asNode(targetNode).name AS targetNodeName,
    totalCost,
    [nodeId IN nodeIds | gds.util.asNode(nodeId).name] AS nodeNames,
    costs,
    nodes(path) as path
ORDER BY index



MATCH (source:Location {name: 'A'}), (target:Location {name: 'F'})
CALL gds.shortestPath.dijkstra.write.estimate('myGraph', {
    sourceNode: source,
    targetNode: target,
    relationshipWeightProperty: 'cost',
    writeRelationshipType: 'PATH'
})
YIELD nodeCount, relationshipCount, bytesMin, bytesMax, requiredMemory
RETURN nodeCount, relationshipCount, bytesMin, bytesMax, requiredMemory


 aura for 2nd database
aura
ns
p=J@1
for nspin
neo4j+s://6e113da3.databases.neo4j.io
neo4j
5iFLemPCwrA4X-lKySgWcMP5G3R6FsP2uPDDV54alTw
https://bloom.neo4j.io/index.html?connectURL=neo4j%2Bs%3A%2F%2F6e113da3.databases.neo4j.io&_ga=2.255018251.2085073446.1660460035-425793549.1660460035


for toggle timeline add start date and an end date in in data schema schema database property
and then add it into visualisation settings

added query on the vis
created flow for rest api in nifi







/////////////////////////////////////////////

MATCH (n:Level0) SET n:Item REMOVE n:Level0



MATCH (n:Level1) SET n:Material REMOVE n:Level1



MATCH (n:Level2) SET n:Material REMOVE n:Level2



MATCH (n:Level3) SET n:Chemical REMOVE n:Level3



MATCH (n:AlternativeLevel2) REMOVE n:AlternativeLevel2



MATCH (n:AlternativeProcess) REMOVE n:AlternativeProcess



MATCH (s:Structure)<-[r:HAS_STRUCTURE]-(c)

SET c.smiles = s.smiles

DETACH DELETE s



MATCH (e:Energy)

DETACH DELETE e



MATCH (m:Material)<-[rel:PRESENT_IN]-(c:Chemical)

CALL apoc.refactor.invert(rel)

yield input, output

RETURN input, output



MATCH (m:Material)-[rel:PRESENT_IN]->(c:Chemical)

CALL apoc.refactor.setType(rel, 'HAS_CHEMICAL')

YIELD input, output

RETURN input, output



MATCH (:Process)-[rel:ALTERNATIVE]->(:Process)

CALL apoc.refactor.setType(rel, 'ALTERNATIVE_PROCESS')

YIELD input, output

RETURN input, output



MATCH (p:Process)<-[rel:ALTERNATIVES_PROCESS]-(m)

CALL apoc.refactor.invert(rel)

yield input, output

RETURN input, output



MATCH (p:Process)-[rel:ALTERNATIVES_PROCESS]->(m)

CALL apoc.refactor.setType(rel, 'USES')

yield input, output

RETURN input, output



MATCH (p:Process)<-[rel:PROCESS]-(m)

CALL apoc.refactor.invert(rel)

yield input, output

RETURN input, output



MATCH (p:Process)-[rel:PROCESS]->(m)

CALL apoc.refactor.setType(rel, 'USES')

yield input, output

RETURN input, output
////////////////////////////////////////////////////



<!DOCTYPE etl SYSTEM "https://scriptella.org/dtd/etl.dtd">
<etl>
    <description>Import excel - neo4j</description>
    <connection id="neo4j" driver="neo4j" url="neo4j+s://1*******.io" user="neo4j" password="****************">
        encrypted=true
    </connection>
    <query connection-id="neo4j">
        call apoc.periodic.iterate("MATCH ()-[r]->() return r", "DETACH DELETE r", {batchSize:10000})
    </query>
    <query connection-id="neo4j">
        call apoc.periodic.iterate("MATCH (n) return n", "DETACH DELETE n", {batchSize:10000})
    </query>
</etl>

n.ap=toFloat(replace('$row.F', ',', '.')),





//////////////////////////////////////////////

CREATE CONSTRAINT Name IF NOT EXISTS 
ON (l:Name) 
ASSERT l.name IS UNIQUE; 


CREATE CONSTRAINT Clinical_indication IF NOT EXISTS 
ON (ci:Clinical_indication) 
ASSERT ci.name IS UNIQUE;

CREATE CONSTRAINT Gender IF NOT EXISTS 
ON (g:Gender) 
ASSERT (g.gender) IS UNIQUE; 

CREATE CONSTRAINT Site IF NOT EXISTS 
ON (s:Site) 
ASSERT (s.site) IS UNIQUE;

CREATE CONSTRAINT ClosureType IF NOT EXISTS 
ON (ct:ClosureType) 
ASSERT (ct.closureType) IS UNIQUE;


CREATE CONSTRAINT ReferralType IF NOT EXISTS 
ON (rt:ReferralType) 
ASSERT (rt.referralType) IS UNIQUE;


LOAD CSV WITH HEADERS FROM "file:///2007_2022_Patients.csv" as row

MERGE (n:Name{name: coalesce(trim(row.Name),'')} )
MERGE (g:Gender{gender: coalesce(trim(row.Gender),'')} )
MERGE (s:Site{site:coalesce(trim(row.Site),'')})
MERGE (ci:ClinicalIndication{clinical_indication:coalesce(trim(row.Clinical_Indication),'')} )
MERGE (ct:ClosureType{closureType: coalesce(trim(row.closure_type),'')} )
MERGE (rt:ReferralType{referralType: coalesce(trim(row.Type_of_Referral),'')})

WITH n,g,s,ci,ct,rt,row 
MERGE (n)-[:HAS_GENDER]->(g)
MERGE (n)-[:HAS_CLINICAL_INDICATION]->(ci)
MERGE (n)-[:HAS_CLOSURE_TYPE]->(ct)
MERGE (n)-[:HAS_REFERRAL_TYPE]->(rt)

return n LIMIT 8;

///////////////////////////


MATCH p=(g)<-[r:HAS_GENDER]-(n)-[t:SITE]->(s)-[u:HAS_CLINICAL_INDICATION]->(ci)-[:HAS_CLOSURE_TYPE]->(ct) RETURN p LIMIT 5

MATCH p=(g)<-[r:HAS_GENDER]-(n)-[t:SITE]->(s)-[u:HAS_CLINICAL_INDICATION]->(ci)-[:HAS_CLOSURE_TYPE]->(ct) RETURN p LIMIT 5

///////////////////////////////////////////////////
LOAD CSV WITH HEADERS FROM "file:///2007_2022_Patients2.csv" as row

MERGE (n:ID{id: coalesce(trim(row.id),'')} )
MERGE (g:Gender{gender: coalesce(trim(row.Gender),'')} )
MERGE (s:Site{site:coalesce(trim(row.Site),'')})
MERGE (ci:ClinicalIndication{clinical_indication:coalesce(trim(row.Clinical_Indication),'')} )
MERGE (ct:ClosureType{closureType: coalesce(trim(row.closure_type),'')} )
MERGE (rt:ReferralType{referralType: coalesce(trim(row.Type_of_Referral),'')})

WITH n,g,s,ci,ct,rt,row 
MERGE (n)-[:HAS_GENDER]->(g)
MERGE (n)-[:HAS_CLINICAL_INDICATION]->(ci)
MERGE (n)-[:HAS_CLOSURE_TYPE]->(ct)
MERGE (n)-[:HAS_REFERRAL_TYPE]->(rt)

return n LIMIT 8;
///////////////////////////////////////////////
MATCH (id:ID {id: "12700"})
RETURN id
////////////////////////////
LOAD CSV WITH HEADERS FROM "file:///2007_2022_Patients2.csv" as row
WITH right(row.Date,4) AS date,row
CALL apoc.do.when(apoc.meta.type(date) = "STRING",
'CREATE (a:Node{name:"A"}) RETURN a AS node',
'CREATE (b:Node{name:"B"}) RETURN b AS node',
  {}
)
YIELD value
RETURN value.node AS node;
//////////////////////////
MERGE (n:ID{id: coalesce(trim(row.id),'')} )
MERGE (g:Gender{gender: coalesce(trim(row.Gender),'')} )
MERGE (s:Site{site:coalesce(trim(row.Site),'')})
MERGE (ci:ClinicalIndication{clinical_indication:coalesce(trim(row.Clinical_Indication),'')} )
MERGE (ct:ClosureType{closureType: coalesce(trim(row.closure_type),'')} )
MERGE (rt:ReferralType{referralType: coalesce(trim(row.Type_of_Referral),'')})
MERGE (yr:Year{yr: coalesce(trim(row.Date3),'')} )

WITH n,g,s,ci,ct,rt,row ,yr
MERGE (n)-[:HAS_GENDER]->(g)
MERGE (n)-[:HAS_CLINICAL_INDICATION]->(ci)
MERGE (n)-[:HAS_CLOSURE_TYPE]->(ct)
MERGE (n)-[:HAS_REFERRAL_TYPE]->(rt)
Merge (n)-[:HAS_REFREERAL_YEAR]->(yr)

return n LIMIT 8;
////////////////////////////////////////////////////////
LOAD CSV WITH HEADERS FROM "file:///2007_2022_Patients2.csv" as row
MERGE (n:ID{id: coalesce(trim(row.id),'')} )
MERGE (g:Gender{gender: coalesce(trim(row.Gender),'')} )
MERGE (s:Site{site:coalesce(trim(row.Site),'')})
MERGE (ci:ClinicalIndication{clinical_indication:coalesce(trim(row.Clinical_Indication),'')} )
MERGE (ct:ClosureType{closureType: coalesce(trim(row.closure_type),'')} )
MERGE (rt:ReferralType{referralType: coalesce(trim(row.Type_of_Referral),'')})
MERGE (yr:Year{yr: coalesce(trim(row.Date3),'')} )
Merge(pt:Patient)

WITH n,g,s,ci,ct,rt,row ,yr,pt
MERGE (pt)-[:HAS_REFREERAL_YEAR]->(yr)
MERGE (yr)-[:HAS_GENDER]->(g)
MERGE (g)-[:HAS_Patients]->(n)
MERGE (n)-[:HAS_CLINICAL_INDICATION]->(ci)
MERGE (n)-[:HAS_CLOSURE_TYPE]->(ct)
MERGE (n)-[:HAS_REFERRAL_TYPE]->(rt)

return n LIMIT 8;
////////////////////////////////////////////////////////////////////////////////////////////

LOAD CSV WITH HEADERS FROM "file:///2007_2022_Patients2.csv" as row
MERGE (g:Gender {uid:coalesce(trim(row.Gender),'')+'-'+coalesce(trim(row.Date3),'')})
            SET g.name=coalesce(trim(row.Gender),'') return g

LOAD CSV WITH HEADERS FROM "file:///2007_2022_Patients2.csv" as row
MERGE (yr:Year {uid: coalesce(trim(row.Date3),'')})
    SET yr.name=coalesce(trim(row.Date3),'')


LOAD CSV WITH HEADERS FROM "file:///2007_2022_Patients2.csv" as row
MERGE (n:ID{name:coalesce(trim(row.id)1,'')})
MERGE (s:Site{name:coalesce(trim(row.Site),'')})
MERGE (ci:ClinicalIndication{name:coalesce(trim(row.Clinical_Indication),'')} )
MERGE (ct:ClosureType{name: coalesce(trim(row.closure_type),'')} )
MERGE (rt:ReferralType{name: coalesce(trim(row.Type_of_Referral),'')})
Merge(pt:Patient{name:'Patients'})
WITH n,s,ci,ct,rt,row ,pt
MATCH (yr:Year{uid:coalesce(trim(row.Date3),'')})
MATCH(g:Gender{uid:coalesce(trim(row.Gender),'')+'-'+coalesce(trim(row.Date3),'')})

WITH n,g,s,ci,ct,rt,row ,yr,pt
MERGE (pt)-[:HAS_REFFERAL_YEAR]->(yr)
MERGE (yr)-[:HAS_GENDER]->(g)
MERGE (g)-[:HAS_PATIENTS]->(n)
MERGE (n)-[:HAS_CLINICAL_INDICATION]->(ci)
MERGE (n)-[:HAS_CLOSURE_TYPE]->(ct)
MERGE (n)-[:HAS_REFERRAL_TYPE]->(rt)

return n LIMIT 8;



////////////////////////////////////////////////
LOAD CSV WITH HEADERS FROM "file:///2007_2022_Patients2.csv" as row
MERGE (n:ID{id: coalesce(trim(row.id),'')} )
MERGE (s:Site{site:coalesce(trim(row.Site),'')})
MERGE (ci:ClinicalIndication{clinical_indication:coalesce(trim(row.Clinical_Indication),'')} )
MERGE (ct:ClosureType{closureType: coalesce(trim(row.closure_type),'')} )
MERGE (rt:ReferralType{referralType: coalesce(trim(row.Type_of_Referral),'')})
Merge(pt:Patient)
WITH n,s,ci,ct,rt,row ,pt
MATCH (yr:Year{uid:coalesce(trim(row.Date3),'')})
MATCH(g:Gender{uid:coalesce(trim(row.Gender),'')+'-'+coalesce(trim(row.Date3),'')})

WITH n,g,s,ci,ct,rt,row ,yr,pt
MERGE (pt)-[:HAS_REFREERAL_YEAR]->(yr)
MERGE (yr)-[:HAS_GENDER]->(g)
MERGE (g)-[:HAS_Patients]->(n)
MERGE (n)-[:HAS_CLINICAL_INDICATION]->(ci)
MERGE (n)-[:HAS_CLOSURE_TYPE]->(ct)
MERGE (n)-[:HAS_REFERRAL_TYPE]->(rt)

return n LIMIT 8;
///////////////////////////////////////////////
LOAD CSV WITH HEADERS FROM "file:///2007_2022_Patients2.csv" as row
MERGE (n:ID{name:coalesce(trim(row.id),'')})
MERGE (g:Gender {name:coalesce(trim(row.Gender),'')})
MERGE (yr:Year {name: coalesce(trim(row.Date3),'')})

MERGE (s:Site{name:coalesce(trim(row.Site),'')})
MERGE (ci:ClinicalIndication{name:coalesce(trim(row.Clinical_Indication),'')} )
MERGE (ct:ClosureType{name: coalesce(trim(row.closure_type),'')} )
MERGE (rt:ReferralType{name: coalesce(trim(row.Type_of_Referral),'')})
Merge(pt:Patient{name:'Patients'})

WITH n,g,s,ci,ct,rt,row ,yr,pt
MERGE (pt)-[:HAS_PATIENTS]->(n)
MERGE (n)-[:HAS_REFFERAL_YEAR]->(yr)
MERGE (n)-[:HAS_GENDER]->(g)
MERGE (n)-[:HAS_CLINICAL_INDICATION]->(ci)
MERGE (n)-[:HAS_CLOSURE_TYPE]->(ct)
MERGE (n)-[:HAS_REFERRAL_TYPE]->(rt)

return n LIMIT 8;

/////////////////////////////////////////////////

LOAD CSV WITH HEADERS FROM "file:///2007_2022_Patients2.csv" as row
MERGE (n:ID{name:coalesce(trim(row.id),'')})
MERGE (g:Gender {name:coalesce(trim(row.Gender),'')})
MERGE (yr:Year {name: coalesce(trim(row.Date3),'')})

MERGE (s:Site{name:coalesce(trim(row.Site),'')})
MERGE (ci:ClinicalIndication{name:coalesce(trim(row.Clinical_Indication),'')} )
MERGE (ct:ClosureType{name: coalesce(trim(row.closure_type),'')} )
MERGE (rt:ReferralType{name: coalesce(trim(row.Type_of_Referral),'')})
Merge(pt:Patient{name:'Patients'})

WITH n,g,s,ci,ct,rt,row ,yr,pt
MERGE (pt)-[:HAS_PATIENTS]->(n)
MERGE (n)-[:HAS_REFFERAL_YEAR]->(yr)
MERGE (n)-[:HAS_GENDER]->(g)
MERGE (n)-[:HAS_CLINICAL_INDICATION]->(ci)
MERGE (n)-[:HAS_CLOSURE_TYPE]->(ct)
MERGE (n)-[:HAS_REFERRAL_TYPE]->(rt)

return n LIMIT 8;


For handling null values

MATCH (p:Person)
RETURN collect(COALESCE(p.email, 'NOT SET')) as emails

When we instead use null property values, we can MATCH or CREATE using a null property value, but we cannot use MERGE:



https://home.openweathermap.org/history_bulks/new
https://openweathermap.org/history-bulk#examples
https://openweathermap.org/api/solar-radiation




/////////////////////

steps for using rdkit in neo4j:
1. Download rdkit-neo4j project from https://github.com/rdkit/neo4j-rdkit
2. Unzip the project and go to neo4j-rdkit-master---master one will not create jar file so sownlod other versions for example rdkit  branch 4.4----D:\neo4j rdkit 4.4\neo4j-rdkit-4.4\target
3.import it init ecclipse and then create mvn package-it will create a jar file in the target file--jar file will be rdkit-index-1.3.0.jar
4. copy the generated jar file in plugin folder of neo4j database 
5. restart the neo4j
6.Call dbms.procedures();
this function will show all the procedures present in rdkit in neo4j

fOR USING RDKIt in neo4j it is mandatory to use this format
CREATE (c:Chemical:Structure {smiles: 'C(F)(F)F'})




CREATE (Chemical:Chemical{name: "Nitric Acid" , GWP:"  ", Toxicity:" "}) RETURN Chemical
CREATE (Energy:Energy{name: "energy-1"}) RETURN Energy
CREATE (Option)-[r:HAS_CHEMICAL]->(Chemical{name:"Nitric Acid"}) return r
CREATE (Option)-[e:HAS_ENERGY]->(ENERGY) return e


//For Aggregating
match (c:Method)
UNWIND  c AS n
with n
match (Method{name:n.name})-->(Chemical)
with Method,Chemical
unwind toInteger(trim(Chemical.GWP)) as u
with sum(u) as t,Method
SET Method.GWP=t
return Method,t

////////////////////////////////////////


match (Method{name:"TBAOH-based"})-[r:has_chemical]->(Chemical)
with Method,Chemical,r
unwind toInteger(trim(Chemical.GWP)) as u
unwind toFloat(trim(r.quantity)) as q
with u*q as t,Method,u,q
unwind t as l
with sum(l) as d,Method
set Method.GWP=d
return Method	


match (c:Method)
UNWIND  c AS n
with n
match (Method{name:n.name})-[r]->(Chemical)
with Method,Chemical,r
unwind toFloat(trim(Chemical.GWP)) as u
unwind toFloat(trim(r.quantity)) as q
with u*q as t,Method,u,q
unwind t as l
with sum(l) as d,Method
set Method.GWP=d
return Method



match (c:Method)
UNWIND  c AS n
with n
match (Method{name:n.name})-[r:has_chemical]->(t)
with Method,t,r
unwind toFloat(trim(toString(t.Toxicity))) as u
unwind toFloat(trim(r.quantity)) as q
with u*q as t,Method,u,q
unwind t as l
with sum(l) as d,Method
set Method.Toxicity=d
return Method




MATCH (bruceWayne:Person {name:'Bruce Wayne'})
CALL apoc.do.when(bruceWayne.isOrphan, "MERGE (batman:Hero {name:'Batman'}) CREATE (bruce)-[:SuperheroPersona]->(batman) RETURN bruce", "SET bruce.name = 'Bruce NOT BATMAN Wayne' RETURN bruce", {bruce:bruceWayne}) YIELD value
...
https://neo4j.com/developer/kb/conditional-cypher-execution/
