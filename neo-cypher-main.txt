LOAD CSV WITH HEADERS 
FROM 'file:///main1.csv' AS line
WITH DISTINCT line
MERGE (category:Category{name: line.`Category`})
CREATE (P:Product {name: line.`Product name`})


LOAD CSV WITH HEADERS 
FROM 'file:///main1.csv' AS line
match (c:Category{name: line.`Category`})
MERGE (p:Product{name:line.`Product name `})
with c,p
MERGE (p)-[:Product_of]->(c)
return p,c


LOAD CSV WITH HEADERS 
FROM 'file:///main1.csv' AS line
match (p:Product{name: line.`Product name `})
MERGE (pc:Product_component{name:line.`Component `})
with p,pc
MERGE (pc)-[:component_of]->(p)
return p,pc

LOAD CSV WITH HEADERS 
FROM 'file:///main1.csv' AS line with line 
match (p:Product{name: line.`Product name `})
match (pc:Product_component{name:line.`Component `,Al_content:line.`Aluminium `,Cu_content:line.`Copper `,Steel_content:line.`Steel `,Plastic_content:line.`Plastic `,Li_ion_Battery_Content:line.`Li_ion battery`,PCB_content:line.`PCB `,Flat_Panel_glass:line.`Flat panel glass`,CRT_glass:line.`CRT glass `,other_glass:line.`Other glass`,other_metal_content:line.`Other metals`,other_contents:line.`Others`,total_mass:line.`Total mass (g)`})
with p,pc
MERGE (pc)-[:component_of]->(p)
return p,pc


==============================================================================


LOAD CSV WITH HEADERS 
FROM 'file:///main1.csv' AS line
WITH DISTINCT line
MERGE (category:Category{name: line.`Category`})
CREATE (P:Product {name: line.`Product name`})


LOAD CSV WITH HEADERS 
FROM 'file:///main1.csv' AS line
match (c:Category{name: line.`Category`})
MERGE (p:Product{name:line.`Product name `})
with c,p
MERGE (p)-[:Product_of]->(c)
return p,c


LOAD CSV WITH HEADERS 
FROM 'file:///main1.csv' AS line
match (p:Product{name: line.`Product name `})
CREATE (pc:Product_component{name:line.`Component `,Al_content:line.`Aluminium `,Cu_content:line.`Copper `,Steel_content:line.`Steel `,Plastic_content:line.`Plastic `,Li_ion_Battery_Content:line.`Li_ion battery`,PCB_content:line.`PCB `,Flat_Panel_glass:line.`Flat panel glass`,CRT_glass:line.`CRT glass `,other_glass:line.`Other glass`,other_metal_content:line.`Other metals`,other_contents:line.`Others`,total_mass:line.`Total mass (g)`})
with p,pc
MERGE (pc)-[:component_of]->(p)
return p,pc

==========================================================================================



LOAD CSV WITH HEADERS 
FROM 'file:///main1.csv' AS line
WITH DISTINCT line
MERGE (c:Category{name: line.`Category`})
MERGE (p:Product{name:line.`Product name `})
MERGE (p)-[:Product_of]->(c)
CREATE (pc:Product_component{name:line.`Component `,Al_content:line.`Aluminium `,Cu_content:line.`Copper `,Steel_content:line.`Steel `,Plastic_content:line.`Plastic `,Li_ion_Battery_Content:line.`Li_ion battery`,PCB_content:line.`PCB `,Flat_Panel_glass:line.`Flat panel glass`,CRT_glass:line.`CRT glass `,other_glass:line.`Other glass`,other_metal_content:line.`Other metals`,other_contents:line.`Others`,total_mass:line.`Total mass (g)`})
MERGE (pc)-[:component_of]->(p)
return p,pc,c






LOAD CSV WITH HEADERS 
FROM 'file:///main1.csv' AS line
WITH DISTINCT line
MERGE (c:Category{name: line.`Category`})
MERGE (p:Products{name:line.`Product name `})
MERGE (p)-[:Product_of]->(c)
CREATE (pc:ProductComponents{name:line.`Component `,Al_content:line.`Aluminium `,Cu_content:line.`Copper `,Steel_content:line.`Steel `,Plastic_content:line.`Plastic `,Li_ion_Battery_Content:line.`Li_ion battery`,PCB_content:line.`PCB `,Flat_Panel_glass:line.`Flat panel glass`,CRT_glass:line.`CRT glass `,other_glass:line.`Other glass`,other_metal_content:line.`Other metals`,other_contents:line.`Others`,total_mass:line.`Total mass (g)`})
MERGE (pc)-[:component_of]->(p)
return p,pc,c


SHOW CONSTRAINT
CREATE CONSTRAINT ON (c:Category) ASSERT c.name IS UNIQUE;
CREATE CONSTRAINT ON (p:Product) ASSERT p.name IS UNIQUE;


http://localhost:7474/db/neo4j/tx
{
  "statements": [
    {
      "statement": "match (n:Category) RETURN n"
    }
  ]
}



match (n:Category) match (p:Products) MERGE (p)-[x:Product_of]->(c) RETURN n,p,x

MATCH (pc:ProductComponents)
match (p:Products)
RETURN sum(toInteger(pc.Cu_content))



MATCH c = (Category)
match p = (Products)
match pc=(ProductComponents)  
FOREACH (n IN nodes(c)
| match  (Category {name:n.name})<--(Products)<--(ProductComponents) 
SET n.cu =sum(toInteger(ProductComponents.Cu_content) ))/////////////////////wrong


match (Category {name:'LAPTOP'})<--(Products)<--(ProductComponents)
with ProductComponents,Category,sum(toInteger(ProductComponents.Cu_content)) as s
set Category.cu=s

match (Category {name:'LAPTOP'})<--(Products)<--(ProductComponents) return sum(toInteger(ProductComponents.Cu_content)) as sum
match (Products {name:'Dell Latitude 14.1" C600 (2001)'})<--(ProductComponents) return sum(toInteger(ProductComponents.Cu_content))
match (Products {name:'Dell Latitude 14.1" C600 (2001)'})-->(ProductComponents) return ProductComponents.Cu_content 




****************Final(Aggregation Query at Category Level)**************************
match (Category {name:'LAPTOP'})<--(Products)<--(ProductComponents)
call{
match (Category {name:'LAPTOP'})<--(Products)<--(ProductComponents)
with ProductComponents,Category,sum((toInteger(ProductComponents.Cu_content))) as s
return sum(s) as t 
} 
set Category.cu=t
************************or********************
match (Category {name:'DRONE'})<--(Products)<--(ProductComponents)
unwind toInteger(ProductComponents.Cu_content) as u
with sum(u) as t,Category
SET Category.cu=t
return Category

match (Category {name:'DRONE'})<--(Products {name:'Promark P70-VR quadcopter (2016)'})<--(ProductComponents)
unwind toInteger(ProductComponents.Cu_content) as u
with sum(u) as t,Category,Products
SET Products.cu=t
return Category




match (Category {name:'LAPTOP'})<--(Products)<--(ProductComponents)
unwind toInteger(ProductComponents.Cu_content) as u
return sum(u)


************************Aggregation at Category Level*****************
match (c:Category)
UNWIND  c AS n
unwind keys(n) as k
with n,k
match (Category {name:n.name})<--(Products)<--(ProductComponents)
unwind toInteger(ProductComponents.Cu_content) as u
with sum(u) as t,Category
SET Category.cu=t
return Category

*******************Aggregation at Product Level*************************
match (c:Products)
UNWIND  c AS n
with n
match (Category)<--(Products {name:n.name})<--(ProductComponents)
unwind toInteger(ProductComponents.Cu_content) as u
with sum(u) as t,Products
SET Products.cu=t
return Products


match (c:Products)
UNWIND  c AS n
with n
match (Category)<--(Products {name:n.name})<--(ProductComponents)
unwind toInteger(ProductComponents.PCB_content    	) as pc
unwind toInteger(ProductComponents.Steel_content	) as st
with sum(pc) as pcb_,sum(st) as s,Products
SET Products.pcb=pcb_
SET Products.steel=s
return Products


match (c:Category)
UNWIND  c AS n
with n
match (Category{name:n.name})<--(Products )<--(ProductComponents)
unwind toInteger(ProductComponents.PCB_content    	) as pc
unwind toInteger(ProductComponents.Steel_content	) as st
with sum(pc) as pcb_,sum(st) as s,Products,Category
SET Category.pcb=pcb_
SET Category.steel=s
return Category


match (pc:ProductComponents) 
with  keys(pc)  as lpc limit 1
match (c:Category)
unwind lpc as kpc
UNWIND  c AS n
with n,kpc
match (Category{name:n.name})<--(Products )<--(ProductComponents)
unwind toInteger(ProductComponents[kpc]) as pc
with sum(pc) as pcb_,Products,Category,kpc
SET Category.kpc=pcb_
return Category

match (pc:ProductComponents) return keys(pc)/////for returning properties of a node


match (pc:ProductComponents) 
unwind keys(pc) as unpc
with unpc
match (c:Category)
UNWIND  c AS n
with n,unpc
match (Category{name:n.name})<--(Products )<--(ProductComponents)
unwind toInteger(ProductComponents.unpc) as pc
with sum(pc) as pcb_,Products,Category,unpc
SET Category.unpc=pcb_
return Category/////////////////failed




match (pc:ProductComponents) 
with  keys(pc)  as lpc limit 1
match (c:Category)
unwind lpc as kpc
UNWIND  c AS n
with n,kpc

match (Category{name:n.name})<--(Products )<--(ProductComponents)
unwind toInteger(ProductComponents.kpc) as pc
with sum(pc) as pcb_,Products,Category,kpc
SET Category.kpc=pcb_
return Category/////////////////////failed



match (pc:ProductComponents) 
with  keys(pc)  as lpc limit 1
unwind lpc as kpc
return kpc



match (c:Category)
unwind c as k
unwind keys(k) as l
return  c.name, l,  k[l]


********************Dashboard scripts**************
MATCH (p:Category) 
RETURN p.name as Category_name,
       p.cu as cu_content

MATCH (c:Products)
RETURN c.name as name,
       c.cu as cu ,c.pcb as pcb,c.plastic as plastic,c.steel as steel 
      
MATCH (n:Category)
RETURN n.name as name, 
       n.cu as cu,
       n.pcb as pcb

MATCH (c:Category) 
RETURN c.name as Category_name,
       c.cu as cu 
MATCH (c:Products)
RETURN c.name as name,
       c.cu as cu ,c.pcb as pcb,c.plastic as plastic,c.steel as steel  
/////////////////////
match (Category {name:'DRONE'})<--(Products)<--(ProductComponents)
unwind toInteger(ProductComponents.Cu_content) as u
with sum(u) as t,Category
SET Category.cu=t
return Category

match (Category {name:'DRONE'})<--(Products {name:'Promark P70-VR quadcopter (2016)'})<--(ProductComponents)
unwind toInteger(ProductComponents.Cu_content) as u
with sum(u) as t,Category,Products
SET Products.cu=t
return Category
//////////////////////////////

grapxiv
USername:w....
Pass>>d..

neo4j 
user:jake1..
pas>>ke1..


MATCH (Category{name:'DVD PLAYER'})
SET Category.image1='https://pngimg.com/uploads/cd_dvd/cd_dvd_PNG102322.png'


mvn org.apache.maven.plugins:maven-install-plugin:2.3.1:install-file "-Dfile=lib/org.RDKitDoc.jar" "-DgroupId=org.rdkit" "-DartifactId=rdkit-doc" "-Dversion=1.0.0" "-Dpackaging=jar"

for restoring backuped database -after stopping database
First we have to stop the database
D:\Software\relate-data\dbmss\dbms-5ee43576-9146-4e30-bb47-b20a073093f9\bin>neo4j-admin restore --from=C:\Users\navee\Downloads\**** --database=**** --force  

restoring from a dump- after stopping database
D:\Software\relate-data\dbmss\dbms-5ee43576-9146-4e30-bb47-b20a073093f9\bin>neo4j-ad
min load --from=D:\Ardhi\****.dump  --database=**** -
-force


CREATE USER jake1
SET PASSWORD 'jake1' CHANGE not REQUIRED
SET STATUS active
SET HOME DATABASE ardhi44
GRANT ROLE admin TO jake1



http://www.cheminfo.org/Chemistry/Cheminformatics/FormatConverter/index.html


CALL org.rdkit.search.exact.smiles(['Chemical', 'Structure'], '***' 
YIELD canonical_smiles 
RETURN org.rdkit.utils.svg(canonical_smiles) as svg
Scalable Vector Graphics is an XML-based vector image format for two-dimensional graphics with support for interactivity and animation. The SVG specification is an open standard developed by the World Wide Web Consortium since 1999. SVG images are defined in a vector graphics format and stored in XML text files. 

for map visualisation in neodash
WITH
  point({latitude:toFloat('13.43'), longitude:toFloat('56.21')}) AS p1,
  point({latitude:toFloat('13.10'), longitude:toFloat('56.41')}) AS p2
  
RETURN {id:"a", label: "Person", point: p1},
       {id: "b", label: "Person", point: p2},
       {start: "a", end: "b",  id: 1}


////////////////////////////

match (loc:Location)<-[:SHIPPED_FROM]-(sub_material:Level2)
with point({latitude:toFloat(loc.Latitude), longitude:toFloat(loc.Longitude)}) AS p1,
 

WITH
  point({latitude:toFloat('13.43'), longitude:toFloat('56.21')}) AS p1,
  point({latitude:toFloat('13.10'), longitude:toFloat('56.41')}) AS p2
  
RETURN {id:"a", label: "Person", point: p1},
       {id: "b", label: "Person", point: p2},
       {start: "a", end: "b",type: "KNOWS",  id: 1}




match (loc:Location)<-[:_FROM]-(****:*****)
//with point({latitude:toFloat(loc.Latitude), longitude:toFloat(loc.Longitude)}) AS p1
return toFloat(left(loc.Latitude,7)),toFloat(left(loc.Longitude,7))


match (loc:Location)<-[:SHIPPED_FROM]-(sub_material:Level2)
WITH point({latitude:toFloat(left(loc.Latitude,7)), longitude:toFloat(left(loc.Longitude,7))}) AS p1
RETURN  {id:"a", label: "Person", point: p1};

call db.schema.visualization()


//For Location in neodash app
match (loc1:Location)<-[sf:SHIPPED_FROM]-(material:Level1)-[st:SHIPPED_TO]->(loc2:Location)
WITH point({latitude:toFloat(left(loc2.Latitude,7)), longitude:toFloat(left(loc2.Longitude,7))}) AS p1, point({latitude:toFloat(left(loc1.Latitude,7)), longitude:toFloat(left(loc1.Longitude,7))}) AS p2,loc2,loc1,sf,st
RETURN [{id:"a", material:"****", point: p1,Location:"Shipped_To "+loc2.Location,label:loc2.Location},{id:"b", material:"*****", Location:"Shipped_From "+loc1.Location,label: loc1.Location, point: p2},{start: "a", end: "b",type:"SHIPPED_TO" , id: 1,Material:"*****"}]

neo4j
oZo2kkYb7QZoA8I_giMN6Wn8b16ACUrDdN1R2h-ofyg
https://browser.neo4j.io/?connectURL=neo4j%2Bs%3A%2F%2Fneo4j%406799f560.databases.neo4j.io%2F&cmd=guide&arg=movies&_ga=2.71877840.230755171.1655092750-1401971628.1655092750
https://browser.neo4j.io/?connectURL=neo4j%2Bs%3A%2F%2Fneo4j%406799f560.databases.neo4j.io%2F&_ga=2.105062592.230755171.1655092750-1401971628.1655092750
https://bloom.neo4j.io/index.html?connectURL=neo4j%2Bs%3A%2F%2F6799f560.databases.neo4j.io&_ga=2.105062592.230755171.1655092750-1401971628.1655092750

for sdf files

for exluding null values with merge command give WHERE IS NOT NULL

https://cambridge-intelligence.com/first-impressions-of-keylines/


URL: naveen.cloud.joget.com
Username: admin
Password: admin

https://naveen.budibase.app/builder/app/app_dev_naveen_77d34a3d02ab4aa2889411486d714cee/design/screen/screen_6af65d933606485dadab6766fbc64779/cda4250bd4b4d4f51ba1a408076406abc


https://www.oracle.com/a/ocom/docs/graph-database-use-cases-ebook.pdf
https://www.nature.com/articles/s41598-019-45349-y
https://towardsdatascience.com/an-introduction-to-graph-neural-network-gnn-for-analysing-structured-data-afce79f4cfdc



for refactoring values

match(c:company)
call apoc.refractornormalise as boolen(comp,'ownership(property)',['Private',1]['State Run',0])
return comp

for changing property name
call apoc.periodic.iterate(
'match (c:comp) return comp','set comp.isprivate=comp.ownership remove comp.ownership',
{batchSize:10,parallel:true}

apoc.load.json(url)

)

//for loading json values directly in neo4j from url
WITH 'https://raw.githubusercontent.com/neo4j-contrib/neo4j-apoc-procedures/4.4/core/src/test/resources/person.json' AS url
CALL apoc.load.json(url) YIELD value as person
MERGE (p:Person {name:person.name})
   ON CREATE SET p.age = person.age, p.children = size(person.children)

//for handling null values from csv while creating merge statement 

LOAD CSV WITH HEADERS FROM 'file:///C:/Users/Zona5/Documents/Neo4j/checkIntel/import/personaldata.csv' AS line1
WITH line1
WHERE NOT line1.address1 IS NULL
MERGE (a:Address1 {address_name1:line1.address1})
           or
///for putting default values instead of "unknown"
LOAD CSV WITH HEADERS FROM 'file:///C:/Users/Zona5/Documents/Neo4j/checkIntel/import/personaldata.csv' AS line1
MERGE (a:Address1 {address_name1: coalesce(line1.address1, "Unknown")})


//graphileon tutorial
https://www.youtube.com/watch?v=fOOptzvhtS4

//for Styling
https://docs.graphileon.com/graphileon/For_Dashboard_Users/Styling.html

//Node style sample
{
	"display": "circle",                              // circle|square|rectangle|triangle
	"width": 80,                                      // in pixels
	"height": 80,                                     // in pixels
	"fillColor": "white",                             // html colour
	"opacity": "1",                                   // 0 - 1
	"lineColor": "black",                             // html colour
	"lineWidth": "2px",
	"lineOpacity": "1",                               // 0 - 1
	"label": "(%).properties.name",                   // caption, e.g. (%).id or (%).properties.name
	"labelPosition": "center",                        // top|left|bottom|right|center
	"iconColor": "black",                             // html colour
	"iconClass": "fa fa-female"                       // font awesome class, e.g. fa fa-female, see https://fontawesome.com/icons for reference
   	"image": "(%).properties.image",                  // image as node background
	"labelStyle": {                                   // caption styling
		"font": "25px Open Sans Condensed, sans-serif",
		"fontWeight": "5",
		"color": "black",
		"stroke": "none",
		"strokeWidth": "1"
	}
}


//Relations style sample
{
	"fillColor": "#999",                              // html colour
	"width": 4,                                       // width in pixels
	"label": "(%).type",                              // caption, e.g. (%).type or  (%).properties.weight
	"toDecoration": "none",                           // end decoration
	"marker": {                                       // marker styling
		"display": "arrow",
		"width": 10,
		"lineWidth": 1,
		"color": "grey",
		"fillColor": "grey"
	},
	"labelStyle": {                                   // caption styling
		"font": "15px Verdana",
		"fontWeight": "0.1px",
		"color": "black"
	}
}
//for icon styling

{
    "type": "tooltip",
    "data":"naveen",
	"lineColor": "blue",
	"lineWidth": "14px"
}
{
	"fillColor": "#ff0",
	"iconOpacity": 0.1,
	"iconColor": "#000",
	"iconClass": "fa fa-users"
},
for ia_function
{
	"fillColor": "#51A3A3",
	"lineColor": "#51A3A3",
	"label": "evaluate((%).properties.name||(%).properties.type)",
	"labelStyle": {
		"fontWeight": "900",
		"color": "white"
	},
	"lineWidth": "10px",
	"lineStyle": "dash"
}



node:	applies to any node
node:MyLabel	applies to any node with a :MyLabel label
node[myParam]	applies to any node with a .myParam property
node[myParam=abc]	applies to any node with the .myParam property having the specific value 'abc', or
node[myParam=Abc Def]	applies to any node with the .myParam property having the specific value 'Abc Def' (case-sensitive)
node:MyLabel[myParam>5]	applies to any node with a :MyLabel label and for which the .myParam property value is greater than 5.
node:MyLabel[prop1>5][prop2=10]	applies to any node with a :MyLabel label and for which the value of property .prop is greater than 5 and value of .prop2 is 10.
rel:	applies to any relation
rel:MYRELTYPE	applies to any relation of type :MYRELTYPE
SELECT DISTINCT (VERTEX(?s) as ?n)
WHERE {	
  ?s ?r ?m . 
  ?m a ?type . 
}
LIMIT 10


{
"display": "rectangle",
	"fillColor": "#51A3v3",
	"lineColor": "#51A3A3",
	"label": "evaluate((%).properties.ChemicalName||(%).properties.type)",
	"labelStyle": {
		"fontWeight": "900",
		"color": "white"
	},
	"lineWidth": "0px",
	"lineStyle": "dash"
}


///Query for executing trigger
CREATE (_179631:IA_Function:IA_Neo4jQuery:Example_1 {`$cypher`:'match (n) RETURN labels(n),COUNT(n) AS cnt     ORDER BY cnt desc', `name`:'LabelsAndCounts'}) 
CREATE (_179632:IA_Function:IA_TableView:Example_1 {`name`:'LabelsAndCounts'})  
CREATE (_179631)-[_546660:TRIGGER {`type`:'success', `#data`:'(%).data'}]->(_179632) 
WITH COUNT(*) AS foo
MATCH (n:Example_1) RETURN n