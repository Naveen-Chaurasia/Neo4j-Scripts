in interface 
int x=10;(by default it will be final static)


Final-could not be changed by anyone.
Static-can be accessed without making object of it(directly using class)

class simple
{
Static String language="English"
}

class Test
{
main()
{

simple.langiage="Hindi"
print(simple.language);
}
}


>>always use final static varualbles for configuration
eg:Static final String USERNAME:Naveen

we can create refernce to an interface not objects
Class KafkaConsumer
Interface Producer


Producer:Inetrface in kafka api
Kafkaproducer:class in kafka api


Consumer:interface in kafka api
KAfkaConsumer:class  in kafka api

Lambdas:


List<String> list =new ArrayList<>();
list.add("red");

for(i..list.size())
{
list.get(index);
}


for( String color:list)
{
sys.out(color)
}


list.forEach(clor->System.out.println(color));

list.stream().filter(color->color.starttsWith("B")).forEach(color->System.out.println(color))


Build tools:
   downloading artifacts(jars/libararies/dependencies,plugins)
   making  abuild file (jar/war/ear)

   a.jar>>b.jar>>c.jar>>d.jar

   a.jar
      b.jar
         c.jar
            d.jar

Maven
Gradle

sbt-scala

for java-maven/gradle
Maven:
helps to download artifacts
helps todownload dpendent artifact
helps to compile .package java files


Testing:  
  Unit-JUNIT


Bigdata
  Problems
      storage
      processing

HAdoop
  hdfs-storage
  MApreduce-processing(for java)
  Hive-processing(on top of mapreduce based on sql)for those who know sql but not java

  Disk based computing

  spark--
        In memory based computing-reducing time
   Historiacal data
   streaming/Real-time/Livedata

Streaming technologies
----------------------
  Apache KAfka-for streaming dta for capturing /passing to respective dashboar
  Queue based system


bbefore kafka jms (java messging system was used)















////////for running kafka using docker



save it in docker-compose.yml file


version: '3'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181       
  
///
then run
docker-compose -f docker-compose.yml up -d
